// Test-specific Prisma schema using SQLite
// This file is used during testing to enable SQLite database usage

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  name         String
  createdAt    DateTime      @default(now()) @map("created_at")
  workouts     Workout[]
  sessions     Session[]
  weightEntries WeightEntry[]
  weightGoals  WeightGoal[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    Int      @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Workout {
  id           Int                   @id @default(autoincrement())
  userId       Int                   @map("user_id")
  templateId   Int?                  @map("template_id")
  title        String
  date         DateTime
  duration     Int?                  // in minutes
  notes        String?
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  user         User                  @relation(fields: [userId], references: [id])
  exercises    Exercise[]
  exerciseSwaps WorkoutExerciseSwap[]

  @@map("workouts")
}

model Exercise {
  id          Int     @id @default(autoincrement())
  workoutId   Int     @map("workout_id")
  name        String
  setsData    String  @map("sets_data") // JSON string storing array of sets
  restSeconds Int?    @map("rest_seconds")
  notes       String?
  orderIndex  Int     @map("order_index")
  createdAt   DateTime @default(now()) @map("created_at")
  workout     Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("exercises")
}

model ExerciseTemplate {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  category     String?
  muscleGroups String?  @map("muscle_groups") // JSON string for SQLite
  instructions String?
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("exercise_templates")
}

model SessionTemplate {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  description       String?
  isDefault         Boolean             @default(false) @map("is_default")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  templateExercises TemplateExercise[]

  @@map("session_templates")
}

model TemplateExercise {
  id            Int             @id @default(autoincrement())
  templateId    Int             @map("template_id")
  exerciseName  String          @map("exercise_name")
  defaultSets   Int?            @map("default_sets")
  defaultReps   Int?            @map("default_reps")
  targetRepRange String?        @map("target_rep_range")
  defaultWeight Float?          @map("default_weight")
  orderIndex    Int             @map("order_index")
  notes         String?
  restSeconds   Int?            @map("rest_seconds")
  createdAt     DateTime        @default(now()) @map("created_at")
  template      SessionTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_exercises")
}

model WorkoutExerciseSwap {
  id                   Int      @id @default(autoincrement())
  workoutId            Int      @map("workout_id")
  originalExerciseName String   @map("original_exercise_name")
  swappedExerciseName  String   @map("swapped_exercise_name")
  reason               String?
  createdAt            DateTime @default(now()) @map("created_at")
  workout              Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("workout_exercise_swaps")
}

model WeightEntry {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  weight    Float    // weight in kg
  date      DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("weight_entries")
}

model WeightGoal {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  targetWeight Float   @map("target_weight") // target weight in kg
  goalType    String   @map("goal_type") // "lose" or "gain"
  targetDate  DateTime? @map("target_date") // optional target date
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("weight_goals")
}