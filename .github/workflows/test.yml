name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Verify installation
      run: |
        node --version
        npm --version
        npm list --depth=0

    - name: Run linting
      run: npm run lint
      continue-on-error: false

    - name: Setup test database
      run: |
        echo "Setting up test database..."
        # Create a test database URL for SQLite
        export DATABASE_URL="file:./test_${{ github.run_id }}_${{ matrix.node-version }}.db"
        echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
        echo "Using database: $DATABASE_URL"
        
        # Generate Prisma client using the test schema
        npx prisma generate --schema=prisma/schema.test.prisma
        
        # Run migrations to create the test database schema
        npx prisma db push --force-reset --schema=prisma/schema.test.prisma
      env:
        NODE_ENV: test

    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false --verbose
      env:
        NODE_ENV: test
        DATABASE_URL: file:./test_${{ github.run_id }}_${{ matrix.node-version }}.db
        NEXTAUTH_SECRET: test-secret-for-github-actions
        NEXTAUTH_URL: http://localhost:3000

    - name: Run specific test suites
      run: |
        echo "Running Auth Tests..."
        npm run test:auth -- --watchAll=false
        echo "Running Exercise Tests..."
        npm run test:exercises -- --watchAll=false
        echo "Running Template Tests..."
        npm run test:templates -- --watchAll=false
        echo "Running Weight Tests..."
        npm run test:weight -- --watchAll=false
        echo "Running Workout Tests..."
        npm run test:workouts -- --watchAll=false
      env:
        NODE_ENV: test
        DATABASE_URL: file:./test_${{ github.run_id }}_${{ matrix.node-version }}.db
        NEXTAUTH_SECRET: test-secret-for-github-actions
        NEXTAUTH_URL: http://localhost:3000

    - name: Display coverage summary
      run: |
        echo "üìä Test Coverage Summary:"
        if [ -f "./coverage/coverage-summary.json" ]; then
          node -e "
            const coverage = JSON.parse(require('fs').readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const { lines, functions, branches, statements } = coverage.total;
            console.log('');
            console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
            console.log('‚îÇ Metric      ‚îÇ Percent  ‚îÇ Covered/Total ‚îÇ');
            console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
            console.log(\`‚îÇ Lines       ‚îÇ \${lines.pct.toString().padEnd(8)} ‚îÇ \${lines.covered}/\${lines.total} \`.padEnd(15) + '‚îÇ');
            console.log(\`‚îÇ Functions   ‚îÇ \${functions.pct.toString().padEnd(8)} ‚îÇ \${functions.covered}/\${functions.total} \`.padEnd(15) + '‚îÇ');
            console.log(\`‚îÇ Branches    ‚îÇ \${branches.pct.toString().padEnd(8)} ‚îÇ \${branches.covered}/\${branches.total} \`.padEnd(15) + '‚îÇ');
            console.log(\`‚îÇ Statements  ‚îÇ \${statements.pct.toString().padEnd(8)} ‚îÇ \${statements.covered}/\${statements.total} \`.padEnd(15) + '‚îÇ');
            console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
            console.log('');
          "
        else
          echo "‚ùå No coverage report found"
        fi

    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-node-${{ matrix.node-version }}
        path: coverage/
        retention-days: 30

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage summary if it exists
          let coverageReport = 'Coverage report not available';
          try {
            const coverageSummary = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const { lines, functions, branches, statements } = coverageSummary.total;
            
            coverageReport = `## üìä Test Coverage Report
            
            | Metric | Percentage | Covered/Total |
            |--------|------------|---------------|
            | Lines | ${lines.pct}% | ${lines.covered}/${lines.total} |
            | Functions | ${functions.pct}% | ${functions.covered}/${functions.total} |
            | Branches | ${branches.pct}% | ${branches.covered}/${branches.total} |
            | Statements | ${statements.pct}% | ${statements.covered}/${statements.total} |
            `;
          } catch (error) {
            console.log('Could not read coverage summary:', error.message);
          }
          
          const comment = `## ‚úÖ Tests Passed!
          
          All unit tests are passing on Node.js ${{ matrix.node-version }}.
          
          ${coverageReport}
          
          ### Test Suites Executed:
          - üîê Authentication Tests
          - üèãÔ∏è Exercise Management Tests  
          - üìã Template Tests
          - ‚öñÔ∏è Weight Tracking Tests
          - üí™ Workout Tests
          - üîó API Integration Tests
          
          *Generated by GitHub Actions*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build:dev
      env:
        NODE_ENV: production
        DATABASE_URL: file:./build-test.db

    - name: Check build artifacts
      run: |
        if [ -d ".next" ]; then
          echo "‚úÖ Build successful - .next directory created"
          ls -la .next/
        else
          echo "‚ùå Build failed - .next directory not found"
          exit 1
        fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Run dependency vulnerability check
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Check for high severity vulnerabilities
      run: |
        echo "üîç Checking for high severity vulnerabilities..."
        npm audit --audit-level=high --json > audit-result.json || true
        
        if [ -f "audit-result.json" ]; then
          high_vulns=$(node -e "
            try {
              const audit = JSON.parse(require('fs').readFileSync('audit-result.json', 'utf8'));
              const high = audit.metadata?.vulnerabilities?.high || 0;
              const critical = audit.metadata?.vulnerabilities?.critical || 0;
              console.log(high + critical);
            } catch (e) { console.log('0'); }
          ")
          
          if [ "$high_vulns" -gt "0" ]; then
            echo "‚ö†Ô∏è Found $high_vulns high/critical severity vulnerabilities"
            echo "Run 'npm audit' locally to see details"
          else
            echo "‚úÖ No high/critical severity vulnerabilities found"
          fi
        fi